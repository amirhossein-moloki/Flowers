// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./test.db"
}

// --- Enums ---

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELED
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum UserRole {
  ADMIN
  CUSTOMER
  DRIVER
  VENDOR
}


// --- Application Models ---

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  password  String
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  vendorId    String
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  images      ProductImage[]
}

model ProductImage {
  id          String   @id @default(uuid())
  product_id  String
  product     Product  @relation(fields: [product_id], references: [id])
  url         String
  sort_order  Int      @default(0)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  items      OrderItem[]
  status     OrderStatus @default(PENDING)
  total      Float
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  order     Order   @relation(fields: [orderId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float // Price at the time of purchase
}

model Address {
  id            String   @id @default(uuid())
  street        String
  city          String
  state         String
  zipCode       String
  country       String
  isResidential Boolean?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  customerAddresses CustomerAddress[]
}

model Promotion {
  id                 String           @id @default(uuid())
  name               String
  code               String           @unique
  description        String?
  discount_type      DiscountType
  discount_value     Float
  start_date         DateTime
  end_date           DateTime?
  max_uses           Int?
  uses_count         Int              @default(0)
  is_active          Boolean          @default(true)
  created_at         DateTime         @default(now())
  updated_at         DateTime         @updatedAt
  order_promotions   OrderPromotion[]
}

model OrderPromotion {
  id             String    @id @default(uuid())
  order_id       String
  promotion_id   String
  discount_applied Float
  created_at     DateTime  @default(now())
  promotion      Promotion @relation(fields: [promotion_id], references: [id])

  @@unique([order_id, promotion_id])
}

model Courier {
  id          String   @id @default(uuid())
  name        String
  phone       String   @unique
  email       String   @unique
  vehicle     String?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Vendor {
  id          String         @id @default(uuid())
  name        String
  description String?
  email       String         @unique
  phone       String         @unique
  address     String
  is_active   Boolean        @default(true)
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  outlets     VendorOutlet[]
  products    Product[]
}

model VendorOutlet {
  id          String   @id @default(uuid())
  vendor_id   String
  vendor      Vendor   @relation(fields: [vendor_id], references: [id])
  name        String
  address     String
  latitude    Float
  longitude   Float
  is_active   Boolean  @default(true)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model ServiceZone {
  id               String           @id @default(uuid())
  name             String
  geo_json         String
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  shipping_rates   ShippingRate[]
  delivery_windows DeliveryWindow[]
}

model DeliveryWindow {
  id          String      @id @default(uuid())
  label       String
  start_time  String
  end_time    String
  cutoff_time String
  zone_id     String
  service_zone ServiceZone @relation(fields: [zone_id], references: [id])
  is_active   Boolean     @default(true)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
}

model ShippingRate {
  id              String      @id @default(uuid())
  service_zone_id String
  service_zone    ServiceZone @relation(fields: [service_zone_id], references: [id])
  rate            Float
  currency        String      @default("USD")
  weight_unit     String      @default("kg")
  min_weight      Float
  max_weight      Float
  is_active       Boolean     @default(true)
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model DriverLocation {
  id          String   @id @default(uuid())
  delivery_id String
  delivery    Delivery @relation(fields: [delivery_id], references: [id])
  courier_id  String
  lat         Float
  lng         Float
  speed_kmh   Float
  heading_deg Float
  recorded_at DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model DeliveryStatus {
  id          String   @id @default(uuid())
  delivery_id String
  delivery    Delivery @relation(fields: [delivery_id], references: [id])
  status      String
  notes       String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Delivery {
  id                       String            @id @default(uuid())
  order_id                 String            @unique
  courier_id               String
  status_id                String?
  assigned_at              DateTime
  delivered_at             DateTime?
  expected_delivery_date   DateTime
  actual_delivery_date     DateTime?
  tracking_number          String            @unique
  created_at               DateTime          @default(now())
  updated_at               DateTime          @updatedAt
  statuses                 DeliveryStatus[]
  driver_locations         DriverLocation[]
  proof_of_delivery        ProofOfDelivery?
}

model ProofOfDelivery {
  id            String   @id @default(uuid())
  delivery_id   String   @unique
  delivery      Delivery @relation(fields: [delivery_id], references: [id])
  signature_url String?
  photo_url     String?
  notes         String?
  is_verified   Boolean  @default(false)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model Notification {
  id         String   @id @default(uuid())
  title      String
  message    String
  recipient  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CustomerAddress {
  id         String   @id @default(uuid())
  user_id    String
  address_id String
  address    Address  @relation(fields: [address_id], references: [id])
  is_default Boolean  @default(false)
  label      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AutomationLog {
  id          String   @id @default(uuid())
  order_id    String
  action      String
  status      String
  message     String
  executed_at DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}