src/modules/order-promotion/application/use-cases/create-order-promotion.usecase.ts:      return failure(HttpError.internalServerError(orderPromotionResult.error.message));
src/modules/courier/application/use-cases/update-courier.usecase.ts:        return failure(HttpError.internalServerError(updatedCourierResult.error.message));
src/modules/order-promotion/application/use-cases/update-order-promotion.usecase.ts:        return failure(HttpError.internalServerError(updatedOrderPromotionResult.error.message));
src/modules/product/application/use-cases/update-product.usecase.ts:        return failure(HttpError.internalServerError(updatedProductResult.error.message));
src/modules/product/application/use-cases/create-product.usecase.ts:      return failure(HttpError.internalServerError(productResult.error.message));
src/modules/delivery-window/presentation/mappers/delivery-window.mapper.ts:      throw new Error(result.error.message);
src/modules/delivery-window/application/use-cases/update-delivery-window.usecase.ts:      return failure(HttpError.internalServerError(updatedDeliveryWindowResult.error.message));
src/modules/delivery-window/application/use-cases/create-delivery-window.usecase.ts:      return failure(HttpError.internalServerError(deliveryWindowResult.error.message));
src/modules/vendor/application/use-cases/create-vendor.usecase.ts:      return failure(HttpError.internalServerError(vendorResult.error?.message));
src/modules/vendor/application/use-cases/update-vendor.usecase.ts:      return failure(HttpError.internalServerError(updatedVendorResult.error?.message));
src/modules/__tests__/delivery-status/prisma-delivery-status.repository.spec.ts:      expect(result.error?.message).toEqual('Delivery status not found');
src/modules/order/application/use-cases/update-order.usecase.ts:      return failure(HttpError.internalServerError(updatedOrderResult.error.message));
src/modules/customer-address/application/use-cases/create-customer-address.usecase.ts:      return failure(HttpError.badRequest(customerAddressResult.error.message));
src/modules/customer-address/application/use-cases/update-customer-address.usecase.ts:        return failure(HttpError.badRequest(updatedCustomerAddressResult.error.message));
src/modules/__tests__/address/address.entity.spec.ts:      expect(result.error.message).toBe('Address fields cannot be empty.');
src/modules/product-image/infrastructure/prisma-product-image.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/product-image/infrastructure/prisma-product-image.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/product-image/infrastructure/prisma-product-image.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/product-image/infrastructure/prisma-product-image.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/product-image/infrastructure/prisma-product-image.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/product-image/infrastructure/prisma-product-image.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/__tests__/courier/courier.entity.spec.ts:      expect(result.error.message).toBe(
src/modules/__tests__/courier/courier.entity.spec.ts:      expect(result.error.message).toBe('Invalid email format.');
src/modules/payment/application/use-cases/create-payment.usecase.ts:      return failure(HttpError.internalServerError(paymentResult.error.message));
src/modules/payment/application/use-cases/update-payment.usecase.ts:      return failure(HttpError.internalServerError(updatedPaymentResult.error.message));
src/modules/delivery-status/infrastructure/prisma-delivery-status.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/delivery-status/infrastructure/prisma-delivery-status.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/delivery-status/infrastructure/prisma-delivery-status.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/delivery-status/infrastructure/prisma-delivery-status.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/product-image/application/use-cases/update-product-image.usecase.ts:        HttpError.internalServerError(updatedImageResult.error.message),
src/modules/product-image/application/use-cases/create-product-image.usecase.ts:      return failure(HttpError.internalServerError(productImageResult.error.message));
src/modules/delivery/application/use-cases/update-delivery.usecase.ts:        HttpError.internalServerError(updatedDeliveryResult.error.message),
src/modules/delivery-status/application/use-cases/create-delivery-status.usecase.ts:      return failure(HttpError.internalServerError(deliveryStatusResult.error.message));
src/modules/address/application/use-cases/update-address.usecase.ts:        return failure(HttpError.badRequest(updatedAddressResult.error.message));
src/modules/notification/infrastructure/prisma-notification.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/notification/infrastructure/prisma-notification.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/notification/infrastructure/prisma-notification.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/notification/infrastructure/prisma-notification.repository.ts:      return failure(HttpError.internalServerError(error.message));
src/modules/shipping-rate/application/use-cases/create-shipping-rate.usecase.ts:      return failure(HttpError.internalServerError(shippingRateResult.error?.message));
src/modules/shipping-rate/application/use-cases/update-shipping-rate.usecase.ts:      return failure(HttpError.internalServerError(updatedShippingRateResult.error?.message));
src/modules/notification/application/use-cases/create-notification.usecase.ts:      return failure(HttpError.internalServerError(notificationResult.error.message));
src/modules/automation-log/application/use-cases/create-automation-log.usecase.ts:      return failure(HttpError.internalServerError(automationLogResult.error.message));
src/modules/automation-log/application/use-cases/update-automation-log.usecase.ts:        return failure(HttpError.internalServerError(updatedAutomationLogResult.error.message));
src/modules/driver-location/application/use-cases/create-driver-location.usecase.ts:      return failure(HttpError.internalServerError(driverLocationResult.error.message));
src/modules/vendor-outlet/application/use-cases/get-vendor-outlet.usecase.ts:      return failure(new Error(error.message));
src/modules/vendor-outlet/application/use-cases/list-vendor-outlets.usecase.ts:      return failure(new Error(error.message));
src/modules/vendor-outlet/application/use-cases/update-vendor-outlet.usecase.ts:      return failure(new Error(error.message));
src/modules/vendor-outlet/application/use-cases/delete-vendor-outlet.usecase.ts:      return failure(new Error(error.message));
src/modules/vendor-outlet/application/use-cases/create-vendor-outlet.usecase.ts:      return failure(new VendorOutletCreationError(error.message));
src/modules/user/application/use-cases/create-user.usecase.ts:      return failure(HttpError.internalServerError(userResult.error?.message));
src/modules/user/http/__tests__/user.controller.spec.ts:      expect(response.body.message).toBe('Creation failed');
src/modules/user/http/__tests__/user.controller.spec.ts:      expect(response.body.message).toBe('Not found');
